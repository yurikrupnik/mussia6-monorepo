# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push
#    branches:
#      - master


#   release:
#     types: [screated
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{secrets.node_version}}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
      - name: Test
        run: npm run test -- --since
      - name: Eslint
        run: npm run lint -- --since
      - name: Build
        run: npm run build -- --since
#  eslint:
#    runs-on: ubuntu-latest
#    needs: ci
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: ${{secrets.node_version}}
#      - run: npm run lint
#  test:
#    runs-on: ubuntu-latest
#    needs: ci
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: ${{secrets.node_version}}
#      - run: npm run test
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: ${{secrets.node_version}}
#      - run: npm ci
#      - run: npm run lint -- --since
#      - run: npm test -- --since
#      - run: npm run build -- --since
#      - uses: actions/upload-artifact@v2
#        with:
#          name: my-artifact
#          path: packages/**/**/dist # or path/to/artifactd

#      - run: npm whoami
#  release:
#    name: Create Release
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          body: |
#            Changes in this Release
#            - First Change
#            - Second Change
#          draft: false
#          prerelease: false

  publish-npm:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12.10.0
          registry-url: https://registry.npmjs.org/
#      - run: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/.npmrc
#      - uses: nelonoel/branch-name@v1
      - run: npm ci
#      - run: npx lerna changed
      - run: npm run build
#      - run: echo ${BRANCH_NAME}
      - run: git config --global user.email krupnik.yuri@gmail.com && git config --global user.name yurikrupnik
#      - run: npm ci
#      - uses: actions/download-artifact@v2
#        with:
#          name: my-artifact
#      - run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
#      - run: npm whoami
      - run: npm run npm-publish
#      - run: npx lerna changed
#      - run: npx lerna publish patch  --yes --no-push --conventional-commits
#      - run: npx lerna exec -- npm install --package-lock-only --ignore-scripts --no-audit
#      - run: git add -u
#      - run: git diff --quiet && git diff --staged --quiet || git commit -am "package-lock.json update"
#      - run: git push origin --follow-tags
#      - run: npm version patch
#      - run: git push origin --follow-tags

#      - run: git add -u
#      - run: git diff --quiet && git diff --staged --quiet || git commit -am "package-lock.json update"
#      - run: git push origin --follow-tags
#      - run: npm run npm-publish
#      - run: npx lerna publish prepatch --pre-dist-tag=nextd --yes --conventional-commits
#      - run: npx lerna publish patch --yes --conventional-commits
#      - run: git diff --quiet && git diff --staged --quiet || git commit -am "package-lock.json update"
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

#  publish-gpr:s
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: 12
#          registry-url: https://npm.pkg.github.com/
#      - run: npm ci
#      - run: npx lerna publish patch --yes --conventional-commits
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
